from .core.config import Configuration
from .core.cookie import CookieMonster
from .core.location import Location
from datetime import datetime
from pathlib import Path as p
from shutil import move
import logging
import sys
import re
import os

log = logging.getLogger(__name__)

class GoogleMaps:

    def __init__(self, login, password, config_path, cookie_name, country, debug):

        self.path = p(config_path)
        self.cookie = self.path / cookie_name
        self.debug = debug
        self.config = Configuration()
        self.startup(login, password, country)
        self.cookie = CookieMonster(login = login,
                                    password = password,
                                    config = self.config['cookie'],
                                    path = self.path,
                                    cookie = self.cookie,
                                    resolution = '768x1024',
                                    debug = debug)

        self.location = Location(   login = login,
                                    session = self.cookie.session,
                                    path = self.path,
                                    config = self.config['location'],
                                    debug = debug)

        if self.cookie_check():
            log.info('All systems go. Initiating first update.')
            self.location.update()

    def do_the_debug(self):

        if self.debug:

            debug_path = self.path / 'debug'

            if not debug_path.exists():
                log.debug('Debug path does not exist, creating.')
                debug_path.mkdir(mode=0o770, parents=True)

            debug_backup = debug_path / 'backup'
            backup_dt = datetime.now().strftime('%Y.%m.%d_%H.%M')
            debug_backup_sub = debug_backup / backup_dt

            dfl = [dfl for dfl in debug_path.iterdir() if dfl.stem != 'backup']

            if len(dfl) == 0:
                if not debug_backup.exists():
                    log.debug('Debug backup path does not exist. Creating.')
                    debug_backup.mkdir(mode=0o770)
            elif len(dfl) >= 1:
                log.debug('Previous debug content found. Moving to: {}'.format(debug_backup_sub))
                debug_backup_sub.mkdir(mode=0o770, parents=True)
                for fof in dfl:
                    move(fof.as_posix(), debug_backup_sub.as_posix())

    def cookie_check(self):

        log.info('Initiating Cookie check.')
        if self.cookie.check():
            log.debug('Cookie validated or successfully generated.')
            return True
        else:
            log.error('Cookie check or generation failed.')
            self.exit()

    def startup(self, login, password, country):

        log.info('Initiating System check.')

        if self.debug:
            log.debug('Checking debug.')
            self.do_the_debug()

        log.debug('Validating login.')
        if re.match('^[a-zA-Z0-9].*[a-zA-Z0-9.-].*[a-zA-Z0-9].*\@[a-zA-Z0-9.-].*[a-zA-Z0-9].*\.[a-zA-Z]{2,}$', login):
            log.debug('Login validated.')
        else:
            log.error('Login either not present or not valid.')
            self.exit()

        log.debug('Checking for password.')
        if password:
            log.debug('Password OK.')
        else:
            log.error('Password not provided or invalid.')
            self.exit()

        log.debug('Checking country code.')
        if country and country in self.config.list:
            log.debug('Country code config available. Enabling config for {}.'
                            .format(country))
            self.config = Configuration(country).config
        else:
            log.debug('Country config not provided or not available. Defaulting to US.')
            self.config = Configuration().config

    def exit(self):
        sys.exit
