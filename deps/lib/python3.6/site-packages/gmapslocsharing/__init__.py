from .core.config import Configuration
from .core.cookie import CookieMonster
from .core.location import Location
from .core.person import Person
from pathlib import Path as p
import logging
import sys
import re
import os

log = logging.getLogger(__name__)

class GoogleMaps:

    def __init__(self, login, password, config_path, cookie_name, country, debug):

        self.path = p(config_path)

        self.cookie = self.path / str(cookie_name)

        self.debug = debug

        self.config = Configuration()

        self.startup(login, password, country)

        self.cookie = CookieMonster(login = login,
                                    password = password,
                                    config = self.config['cookie'],
                                    path = self.path,
                                    cookie = self.cookie,
                                    resolution = '768x1024',
                                    debug = self.debug)

        self.location = Location(   session = self.cookie.session,
                                    path = self.path,
                                    config = self.config['location'],
                                    person = Person,
                                    debug = self.debug)

        if self.cookie_check():
            log.info('All systems go. Standing by for update request.')

    def startup(self, login, password, country):

        log.info('Initiating System check.')

        if self.debug:
            log.debug('Checking for debug folder.')
            debug_path = self.path / 'debug'
            if debug_path.exists():
                log.debug('Debug folder exists. Clearing previous content.')
                for file in debug_path.iterdir():
                    os.remove(file)
            else:
                log.debug('Debug folder not found. creating.')
                debug_path.mkdir(mode=0o770, parents=True)

        log.debug('Validating login.')
        if re.match('^[a-zA-Z0-9].*[a-zA-Z0-9.-].*[a-zA-Z0-9].*\@[a-zA-Z0-9.-].*[a-zA-Z0-9].*\.[a-zA-Z]{2,}$', login):
            log.debug('Login validated.')
        else:
            log.error('Login either not present or not valid.')
            self.exit()

        log.debug('Checking for password.')
        if password:
            log.debug('Password OK.')
        else:
            log.error('Password not provided or invalid.')
            self.exit()

        log.debug('Checking country code.')
        if country and country in self.config.list:
            log.debug('Country code config available. Enabling config for {}.'
                            .format(country))
            self.config = Configuration(country).config
        else:
            log.debug('Country config not provided or not available. Defaulting to US.')
            self.config = Configuration().config

    def cookie_check(self):

        log.info('Initiating Cookie check.')
        if self.cookie.check():
            log.debug('Cookie validated or successfully generated.')
            return True
        else:
            log.error('Cookie check or generation failed.')
            self.exit()

    def exit(self):
        sys.exit
