from selenium.webdriver.support import expected_conditions as ec
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By

from selenium import webdriver
import chromedriver_binary
from pathlib import Path

import requests
import logging
import pickle


log = logging.getLogger(__name__)

class CookieMonster:

    def __init__(self,  username, password,
                        config_path,
                        cookie_filename,
                        resolution='768x1024',
                        login_url='https://accounts.google.com',
                        debug=False):

        self.username = username
        self.password = password
        self.chrome_options = None
        self.browser = None
        self.resolution = resolution
        self.login_url = login_url
        self.config_path = Path(config_path)
        self.cookie_filename = Path(cookie_filename)

        self.agent = (  'Mozilla/5.0 (X11; Linux x86_64) \
                        AppleWebKit/537.36 (KHTML, like Gecko) \
                        Chrome/69.0.3497.100 Safari/537.36')
        self.header = { 'User-Agent': self.agent,
                        'Referer': 'https://accounts.google.com'}

        self.r = requests.Session()
        self.r.headers.update(self.header)

        self.debug = debug

    def cookie_check(self):

        cookie = self.config_path / self.cookie_filename

        log.debug('Cookie Check - Opening login URL via requests.')
        self.r.get(self.login_url)

        try:
            log.debug('Cookie Check - Checking if cookie already exists.')
            if cookie.exists():
                cookie = cookie.as_posix()
                log.debug('Cookie Check - Attempting to load cookie from file.')
                with open(cookie, mode='rb') as f:
                    self.r.cookies.update(pickle.load(f))
        except:
            log.debug('Cookie Check - Failed to load cookie file.')
            return False

        log.debug('Cookie Check - Validating cookie.')
        for key in self.r.cookies.get_dict(domain='.google.com').keys():
            if key in ['1P_JAR', 'APISID', 'CONSENT', 'HSID', 'NID', 'SAPISID', 'SID', 'SIDCC', 'SSID']:
                # not sure if continue is the best method here.
                continue
            else:
                log.debug('Cookie Check - Failed cookie validation.')
                return False

        log.debug('Cookie Check - Cookie exists and is valid.')
        return True

    def init_browser(self):

        log.debug('Driver - Setting up Selenium browser.')
        self.chrome_options = Options()
        self.chrome_options.add_argument('--window-size={}'.format(self.resolution))
        self.chrome_options.set_headless(headless=True)

        log.debug('Driver - Setting Chrome options.')
        self.browser = webdriver.Chrome(chrome_options=self.chrome_options)

    def login(self):

        # TODO: check if debug folder exists. create it if it doesn't.

        def debug(ss, url):
            path = self.config_path / Path('debug')
            browser.save_screenshot('{}/{}'.format(path.as_posix(), ss))
            with open('{}/urls.txt'.format(path), mode='a') as url_output:
                url_output.write('{} URL: {}\n'.format(url, self.browser.current_url))

        log.debug('Login - Opening {}.'.format(self.login_url))
        self.browser.get(self.login_url)

        if self.debug:
            debug('gmail_login_01.png', 'Login Screen')

        log.debug('Login - Entering email.')
        email = self.browser.find_element_by_css_selector('[type=email]')
        email.send_keys(self.username)

        if self.debug:
            debug('gmail_login_02.png', 'Email Submission')

        log.debug('Login - Submitting email.')
        email.send_keys(Keys.RETURN)

        if self.debug:
            debug('gmail_login_03.png', 'Password Screen')

        log.debug('Login - Entering password.')
        password = self.browser.find_element_by_css_selector('[type=password]')
        password.send_keys(self.password)

        if self.debug:
            debug('gmail_login_04.png', 'Password Submission')

        log.debug('Login - Submitting password.')
        password.send_keys(Keys.RETURN)

        if self.debug:
            debug('gmail_login_05.png', '2FA Wait')

        # TODO: could create a login type tree here based on configuration options
        # passed in via configuration.yaml file (notification, authenticator, etc)
        log.debug('Login - Waiting for user to approve login via phone notification...')
        wait = WebDriverWait(self.browser, 10, poll_frequency=1)
        wait.until(ec.url_to_be('https://myaccount.google.com/?pli=1'))

        if self.debug:
            debug('gmail_login_06.png', 'Account Home')

    def export_cookies(self):

        log.debug('Export - Opening {} via requests'.format(self.login_url))
        self.r.get(self.login_url)

        log.debug('Export - Converting selenium cookies to requests.')
        for cookie in self.browser.get_cookies():
            self.r.cookies.set( version=0,
                                name=cookie['name'],
                                value=cookie['value'],
                                domain=cookie.get('domain', None),
                                path=cookie.get('path', '/'),
                                secure=cookie.get('secure', False),
                                expires=cookie.get('expiry', None),
                                discard=False)

        log.debug('Export - Exporting CookieJar via pickle binary.')

        cookie = self.config_path / self.cookie_filename

        with open(cookie.as_posix(), mode='wb') as f:
            pickle.dump(self.r.cookies, f)

        self.browser.quit()

    def run(self):

        log.info('Initiating Cookie Check.')
        if self.cookie_check():
            log.info('Cookie checks out.')
        else:
            log.info('Beginning cookie acquisition.')
            log.info('Initiating Chrome WebDriver.')
            self.init_browser()
            log.info('Initiating Login.')
            self.login()
            log.info('Initiating Cookie Export.')
            self.export_cookies()
